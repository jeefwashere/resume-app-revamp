# The name of your workflow. It will be displayed on the "Actions" tab of your GitHub repository.
name: Django CI

# Controls when the workflow will run.
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch.
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:

    # The type of runner that the job will run on. We'll use the latest version of Ubuntu.
    runs-on: ubuntu-latest
    
    # We define the version of Python to use. You can also test on multiple versions.
    strategy:
      matrix:
        python-version: ["3.10"] # Change to your project's Python version.

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    # 1. Checks out your repository under $GITHUB_WORKSPACE, so your job can access it.
    - uses: actions/checkout@v3

    # 2. Sets up the specified version of Python.
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # 3. Installs project dependencies.
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 4. Runs flake8 for linting. Make sure you have flake8 in your requirements.txt.
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # 5. Runs the Django tests.
    - name: Run Tests
      run: |
        python manage.py test